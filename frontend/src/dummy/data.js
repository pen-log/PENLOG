const data = [{
    id: 0,
    title: '🎉 토스뱅크 FE 합격 후기 - NEXT 2023',
    content: '토스 광탈한 덕에, 토스 보고 공부해서, 토스 합격한 썰',
    period: '2022-01-01',
    name: 'abcd1234',
    info: `이 글에는 Figma 디자인을 CSS로 만드는 꿀팁이 있는 글입니다. TailwindCSS나 AdorbleCSS에 관심이 없어도 아주 큰 도움이 될거에요!
    최초 설명하는 단계에서는 JIT(Just -in -time) 라고 하는 기능이 가장 중요한 차별화 Feature였기에 이것만을 중점으로 설명을 했으나 TailwindCSS도 3.0 부터는 이제 JIT가 기본기능이 되어있기에 이러한 설명만으로는 그 이면에 있는 더 큰 장점들을 설명하는 컨텐츠가 부족했다고 생각이 들었고 그러한 내용을 제보해주셨습니다.
그래서 이 글에서는 TailwindCSS의 어떤 점을 불편하게 느꼈고 그래서 어떤 차별화를 통해서 AdorableCSS는 어떻게 개선하고자 했는지 다른 관점들의 이야기를 해보고자 합니다.
특히 Figma 디자인을 자동으로 코드로 만들어주는 플러그인을 만들면서 느꼈던 이야기들과 함께 디자인을 CSS로 만드는 마크업 팁도 함께 소개해드리고자 합니다.
📌 이 글은 AdorableCSS의 장점을 소개하고자 하는 글이지만, 일방적인 홍보글이 되지 않고 읽는 재미와 보람을 느낄수 있도록 여러가지 CSS 테크 개념과 팁들을 함께 담고자 노력했습니다.
JIT Atomic CSS Framework와 Figma to CSS, Figma 디자인 개념 라고 하는 키워드를 중심으로 AdorableCSS를 선택하지 않도록 충분히 도움이 될만한 글이 되어줄거라고 생각합니다.TailwindCSS와 HandOff호랑이 담배피던 시절의 웹 개발 퍼플리싱은 그냥 이미지만 전달을 받거나 일부 가이드를 정도 그려준 이미지를 통해서 CSS를 한땀한땀 다 만들어야 했습니다.반면 디자이너가 힘이 없는 회사는 가이드 수준을 엄청 요구해서 디자이너들이 죽어나던 시절도 있었죠.
퍼블리싱이 쉬운 일이 아닌데 시간은 상당히 많이 들어가는 일인데 반해 진입장벽은 낮아서 대체가능한 인력이 많다보니 비싼 일도 아니었습니다.그렇지만 디자이너는 가이드를 만드느라 수정된 부분을 찾아내느라 전체가 다 바뀌면 일일히 이미지 다 교체하느라 잔일에 시간을 정말 많이 잡아먹던 일이었습니다.

이러한 요구사항에 힘입어 스케치, 제플린, figma와 같은 UI 디자인 전용툴과 디자인 HandOff 툴이 발전하면서 이러한 불편함을 해소하면서 퍼블리싱의 생산성은 더 높아졌습니다.

그리고 이러한 도구들의 발전으로 인해서 더 쉬워지는 것을 넘어, '디자인을 자동으로 HTML+CSS코드로 뽑아줄 수 없나?' 하는 생각으로 Figma to Code와 같은 자동 코드 생성도구 들이 만들어지고 연구되기 시작했습니다.

저 역시 이러한 방법들을 시도하고 연구해보면서 디자인을 코드로 자동화를 하는 Figma 플러그인등을 만들면서 생산성을 높이고자 해보았습니다.

일부 디자인을 미리 CSS로 변환하여 힌트식으로 보여주는 경우는 유용하나, 디자인전체를 코드로 생성하는 경우에는 아직은 대부분 코드의 품질이 아직은 그다지 좋지 않습니다.

Auto Code Generator의 품질이 나쁜 이유
디자이너가 만든 디자인을 그대로 기계적으로 코드로 생성하는 경우에는 다음과 같은 부분들이 문제가 됩니다.

디자이너에게는 선과 네모, 간격들이지만 개발자에게는 컴포넌트 단위의 개념과 각각의 이름이 필요하다.
디자이너는 절대좌표와 절대크기로 그려내지만 개발은 반응하는 상대크기가 필요하다.
디자이너에게는 그림이지만 개발에게는 구조와 컴포넌트가 필요하다.
자동생성된 코드에서의 이름짓기 문제
일반적으로 코드를 자동으로 생성하면 다음과 같은 형태가 만들어집니다.코드를 들여다보면 Frame33, Text, Image42 와 같이 미처 정리되지 못한 이름들을 자주 만날 수 있게 됩니다.


이게 짧게 보면 이정도는 괜찮지 않나 싶겠지만, 제가 예시를 일부만 가져와서 그렇지 실제로 디자인을 코드로 자동생성해보면 이게 무엇인지 어떻게 써야할지 힘든 가독성이 떨어지는 코드가 됩니다.

자동으로 생성하는 코드인데도 가독성이 필요한 까닭은 단순히 디자인과 똑같은 결과를 만든다고 해서 끝이 아니라 결국 코드 위에 비지니스 로직과 동적인 디자인을 아직은 개발자가 입혀야 하기 때문이죠.

이러한 모호한 이름들은 개발자의 입장에서는 쓰기 곤란한 품질이 낮은 코드가 됩니다.var temp, var tt2929 와 같은 의미가 불분명한 코드는 유지보수 관점에서는 사용하면 안되는 코드니까요.

    디자인을 코드로 만드는 것은 누구의 역할일까?
    이를 해결하기 위해서는 디자이너가 처음부터 빠짐없이'`
}, {
    id: 1,
    title: '8년 차 개발자가 기술 면접 고수들에게',
    content: '오늘은 기술면접 잘 보시는 분들의 특징에 대해서 말씀드리고자 합니다. 인성면접과 달리 기술면접은 테크 기업이라면 어느 정도 공통',
    period: '2022-01-11',
    name: 'sksmsdi02'
}, {
    id: 2,
    title: '집에 남는 맥북을 데이터베이스로 만들',
    content: '이번에 맥북을 새로 구매하게되면서.. 원래 사용하던 맥북의 처분을 어떻게 할까? 하다가,얼마전에 남는 노트북을 데이터베이스로 만들어',
    period: '2022-01-05',
    name: 'bmbm0123'
}, {
    id: 3,
    title: '프론트의 디자인 시스템 구축기',
    content: '프로젝트 기획부터 디자인까지의 과정과 디자인 시스템을 어떤 식으로 구축했는지에 대한 과정을 담았습니다.',
    period: '2022-01-02',
    name: 'zxol00'
}, {
    id: 4,
    title: 'Vanilla Js랑 React.. 뭐가 더 빨라요',
    content: 'Netflix 도 부분적으로 React 를 걷어내고 JavaScript 로 ............',
    period: '2022-03-01',
    name: 'gurke1m3'
}, {
    id: 5,
    title: '사이드 프로젝트에서 출시율을 높이는 방',
    content: '넥스터즈 23기 예쁜말고운말팀 드로우 서비스 회고록 입니다.',
    period: '2022-01-31',
    name: 'ppppk1003'
}, {
    id: 6,
    title: '[TOP 10] 개발자들이 많이 읽은 아티클',
    content: '동료들은 다 아는 정보, 나만 모르지 않게 만들어주는 일일일에서 한 주간 개발자들이 많이 읽은 상위 10개의 아티클들을 소개합니다.',
    period: '2022-02-01',
    name: 'fol12'
}, {
    id: 7,
    title: '깊은복사를 위한 함수 성능측정과 특징 비교',
    content: '누가 JSON.parse(JSON.stringify()) 가 느리대 !!!? 사실 문자열이 길어지면 느려지는건 맞다....',
    period: '2022-02-05',
    name: 'bmc1'
}, {
    id: 8,
    title: 'V8의 최적화 방식 히든클래스와 인라인',
    content: '이 글에서는 이벤트 루프, 비동기 API, Node.js 콜스택과 같은 핵심 구성 요소를 포함해 Node.js의 비동기적 특성을 설명하고 있습니다. 평소 JavaScript 런타임에 관심을 가지고',
    period: '2022-02-10',
    name: 'pcx000'
}, {
    id: 9,
    title: '하나더 만들기',
    content: '하나더 내용',
    period: '2022-12-31',
    name: 'abcd1234',
    info: `이이를 해결하기 위해서는 디자이너가 처음부터 빠짐없이'`
},
]

export default data